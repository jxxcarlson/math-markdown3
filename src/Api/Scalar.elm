-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Scalar exposing (Codecs, Id(..), Jsonb(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type Id
    = Id String


type Jsonb
    = Jsonb String


defineCodecs :
    { codecId : Codec valueId
    , codecJsonb : Codec valueJsonb
    }
    -> Codecs valueId valueJsonb
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueId valueJsonb
    ->
        { codecId : Codec valueId
        , codecJsonb : Codec valueJsonb
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueId valueJsonb
    = Codecs (RawCodecs valueId valueJsonb)


type alias RawCodecs valueId valueJsonb =
    { codecId : Codec valueId
    , codecJsonb : Codec valueJsonb
    }


defaultCodecs : RawCodecs Id Jsonb
defaultCodecs =
    { codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    , codecJsonb =
        { encoder = \(Jsonb raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Jsonb
        }
    }
