-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (DocumentAggregateOptionalArguments, DocumentByPkRequiredArguments, DocumentOptionalArguments, UserAggregateOptionalArguments, UserByPkRequiredArguments, UserOptionalArguments, document, document_aggregate, document_by_pk, user, user_aggregate, user_by_pk)

import Api.Enum.Document_select_column
import Api.Enum.User_select_column
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import CustomScalarCodecs
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias DocumentOptionalArguments =
    { distinct_on : OptionalArgument (List Api.Enum.Document_select_column.Document_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Api.InputObject.Document_order_by)
    , where_ : OptionalArgument Api.InputObject.Document_bool_exp
    }


{-| fetch data from the table: "document"

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
document : (DocumentOptionalArguments -> DocumentOptionalArguments) -> SelectionSet decodesTo Api.Object.Document -> SelectionSet (List decodesTo) RootQuery
document fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Api.Enum.Document_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Api.InputObject.encodeDocument_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeDocument_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "document" optionalArgs object_ (identity >> Decode.list)


type alias DocumentAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Api.Enum.Document_select_column.Document_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Api.InputObject.Document_order_by)
    , where_ : OptionalArgument Api.InputObject.Document_bool_exp
    }


{-| fetch aggregated fields from the table: "document"

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
document_aggregate : (DocumentAggregateOptionalArguments -> DocumentAggregateOptionalArguments) -> SelectionSet decodesTo Api.Object.Document_aggregate -> SelectionSet decodesTo RootQuery
document_aggregate fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Api.Enum.Document_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Api.InputObject.encodeDocument_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeDocument_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "document_aggregate" optionalArgs object_ identity


type alias DocumentByPkRequiredArguments =
    { id : Int }


{-| fetch data from the table: "document" using primary key columns
-}
document_by_pk : DocumentByPkRequiredArguments -> SelectionSet decodesTo Api.Object.Document -> SelectionSet (Maybe decodesTo) RootQuery
document_by_pk requiredArgs object_ =
    Object.selectionForCompositeField "document_by_pk" [ Argument.required "id" requiredArgs.id Encode.int ] object_ (identity >> Decode.nullable)


type alias UserOptionalArguments =
    { distinct_on : OptionalArgument (List Api.Enum.User_select_column.User_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Api.InputObject.User_order_by)
    , where_ : OptionalArgument Api.InputObject.User_bool_exp
    }


{-| fetch data from the table: "user"

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
user : (UserOptionalArguments -> UserOptionalArguments) -> SelectionSet decodesTo Api.Object.User -> SelectionSet (List decodesTo) RootQuery
user fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Api.Enum.User_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Api.InputObject.encodeUser_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeUser_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "user" optionalArgs object_ (identity >> Decode.list)


type alias UserAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Api.Enum.User_select_column.User_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Api.InputObject.User_order_by)
    , where_ : OptionalArgument Api.InputObject.User_bool_exp
    }


{-| fetch aggregated fields from the table: "user"

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
user_aggregate : (UserAggregateOptionalArguments -> UserAggregateOptionalArguments) -> SelectionSet decodesTo Api.Object.User_aggregate -> SelectionSet decodesTo RootQuery
user_aggregate fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Api.Enum.User_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Api.InputObject.encodeUser_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeUser_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "user_aggregate" optionalArgs object_ identity


type alias UserByPkRequiredArguments =
    { id : Int }


{-| fetch data from the table: "user" using primary key columns
-}
user_by_pk : UserByPkRequiredArguments -> SelectionSet decodesTo Api.Object.User -> SelectionSet (Maybe decodesTo) RootQuery
user_by_pk requiredArgs object_ =
    Object.selectionForCompositeField "user_by_pk" [ Argument.required "id" requiredArgs.id Encode.int ] object_ (identity >> Decode.nullable)
