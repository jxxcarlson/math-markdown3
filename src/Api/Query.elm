-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (AllDocumentsOptionalArguments, DocumentRequiredArguments, DocumentsByAuthorRequiredArguments, FindDocumentByIDRequiredArguments, allDocuments, document, documentsByAuthor, findDocumentByID)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias FindDocumentByIDRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-| Find a document from the collection of 'Document' by its id.

  - id - The 'Document' document's ID

-}
findDocumentByID : FindDocumentByIDRequiredArguments -> SelectionSet decodesTo Api.Object.Document -> SelectionSet (Maybe decodesTo) RootQuery
findDocumentByID requiredArgs object_ =
    Object.selectionForCompositeField "findDocumentByID" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias AllDocumentsOptionalArguments =
    { size_ : OptionalArgument Int
    , cursor_ : OptionalArgument String
    }


{-|

  - size\_ - The number of items to return per page.
  - cursor\_ - The pagination cursor.

-}
allDocuments : (AllDocumentsOptionalArguments -> AllDocumentsOptionalArguments) -> SelectionSet decodesTo Api.Object.DocumentPage -> SelectionSet decodesTo RootQuery
allDocuments fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { size_ = Absent, cursor_ = Absent }

        optionalArgs =
            [ Argument.optional "_size" filledInOptionals.size_ Encode.int, Argument.optional "_cursor" filledInOptionals.cursor_ Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allDocuments" optionalArgs object_ identity


type alias DocumentRequiredArguments =
    { identifier : String }


document : DocumentRequiredArguments -> SelectionSet decodesTo Api.Object.Document -> SelectionSet (Maybe decodesTo) RootQuery
document requiredArgs object_ =
    Object.selectionForCompositeField "document" [ Argument.required "identifier" requiredArgs.identifier Encode.string ] object_ (identity >> Decode.nullable)


type alias DocumentsByAuthorRequiredArguments =
    { author : String }


documentsByAuthor : DocumentsByAuthorRequiredArguments -> SelectionSet decodesTo Api.Object.Document -> SelectionSet (Maybe decodesTo) RootQuery
documentsByAuthor requiredArgs object_ =
    Object.selectionForCompositeField "documentsByAuthor" [ Argument.required "author" requiredArgs.author Encode.string ] object_ (identity >> Decode.nullable)
