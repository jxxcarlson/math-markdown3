-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.User_update_column exposing (User_update_column(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "user"

  - Admin - column name
  - Email - column name
  - FirstName - column name
  - Id - column name
  - LastName - column name
  - TimeStamp - column name
  - Username - column name

-}
type User_update_column
    = Admin
    | Email
    | FirstName
    | Id
    | LastName
    | TimeStamp
    | Username


list : List User_update_column
list =
    [ Admin, Email, FirstName, Id, LastName, TimeStamp, Username ]


decoder : Decoder User_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "admin" ->
                        Decode.succeed Admin

                    "email" ->
                        Decode.succeed Email

                    "firstName" ->
                        Decode.succeed FirstName

                    "id" ->
                        Decode.succeed Id

                    "lastName" ->
                        Decode.succeed LastName

                    "timeStamp" ->
                        Decode.succeed TimeStamp

                    "username" ->
                        Decode.succeed Username

                    _ ->
                        Decode.fail ("Invalid User_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : User_update_column -> String
toString enum =
    case enum of
        Admin ->
            "admin"

        Email ->
            "email"

        FirstName ->
            "firstName"

        Id ->
            "id"

        LastName ->
            "lastName"

        TimeStamp ->
            "timeStamp"

        Username ->
            "username"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe User_update_column
fromString enumString =
    case enumString of
        "admin" ->
            Just Admin

        "email" ->
            Just Email

        "firstName" ->
            Just FirstName

        "id" ->
            Just Id

        "lastName" ->
            Just LastName

        "timeStamp" ->
            Just TimeStamp

        "username" ->
            Just Username

        _ ->
            Nothing
